module test::test

def hello: inst Bool =
    intro Bool/True {}

def foo: for (x: inst Bool) -> inst Bool =
    fun (x: inst Bool) ->
    match x return inst Bool {
        True -> intro Bool/False {},
        False -> intro Bool/True {},
    }

def bar: inst Bool =
    fix (x: 0 inst Bool) => x with y;
    x

def baz: inst False =
    fun (x: inst Bool) ->
    loan x as y with z;
    let t = inst 1;
    take x { t -> inst False, };
    x

def qux: for (p: Sort 0) -> Sort 0 =
    fun (p: Sort 0) -> (for (q: Sort 0) -> q)

def corge: for (x: ref inst Bool) -> for (y: inst Int) -> x in y =
    inst False

def grault: for (x: ref inst Bool) -> for (y: inst Bool) -> (inst Eq (inst Bool)) y *x =
    inst False
